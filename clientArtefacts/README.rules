# This document discusses possible configuration options for Linux auditd rules
#
#
# Release 1.3   20221220 Burn Alting
#  - Made note about turning off sending events to /var/log/messages (journalctl)
# Release 1.2   20211228 Burn Alting
#  - Add information about capturing audit events before auditd starts in kernel
# Release 1.1   20200619 Burn Alting
#  - Change the execve rules by not excluding exit values of -2
#  - Recommend different filename for execve rules so they are loaded last
#  - Recommend the additional of a larger buffersize if execve rules are added
#


# Users should consider the risk the system poses in terms of access to data and generate a rule set based on the risk.

# In a Linux system that manages a very low risk capability, one might may no changes to the Standard configuration and just accept the standard PAM based login/logout type events

# A relatively comprehensive ruleset might be achieved via

cd /usr/share/doc/audit*/rules or /usr/share/audit/sample-rules
cp 10-base-config.rules 11-loginuid.rules 12-ignore-error.rules 30-stig.rules 41-containers.rules 43-module-load.rules /etc/audit/rules.d/

# These rulesets can also be found here - https://github.com/linux-audit/audit-userspace/tree/master/rules

# Also remove default ruleset if not applicable
rm -f /etc/audit/rules.d/audit.rules

# Now edit /etc/audit/rules.d/10-base-config.rules to possibly correct the errornous line
# --backlog_wait_time 0
# which needs to be commented out in earlier systems as it was not supported.

# If it is likely that you will need to apply rule changes or file watches but you cannot reboot
# the host, then also consider changing the enabled flag (-e) to 1, which allows one to change
# a configuration without rebooting. The only other alternative is 2 which requires a reboot
# to change auditing rules. If you want audit DO NOT set it to 0.

# Depending on the risk the system poses, one can also add monitoring of all process execution.
# In a truely sensitive environment, consider all execv's, as per the following
echo '-b 32768' > /etc/audit/rules.d/zzexecve.rules
echo '-a exit,always -F arch=b32 -F auid!=2147483647 -S execve -k cmds' >> /etc/audit/rules.d/zzexecve.rules
echo '-a exit,always -F arch=b64 -F auid!=4294967295 -S execve -k cmds' >> /etc/audit/rules.d/zzexecve.rules
# Note that recording all process execution (except for the nobody user) will create a larger set of events, so
# consider increasing the buffer size on busy systems (-b) as per above

# Should the risk not be so high, in that, you can ignore system user process execution, the following alternative 
# rules do not record system user activity (ie uid < 1000) or the nobody user.

echo '-b 32768' > /etc/audit/rules.d/zzexecve.rules
echo '-a exit,always -F arch=b32 -F auid>=1000 -F auid!=2147483647 -S execve -k cmds' >> /etc/audit/rules.d/zzexecve.rules
echo '-a exit,always -F arch=b64 -F auid>=1000 -F auid!=4294967295 -S execve -k cmds' >> /etc/audit/rules.d/zzexecve.rules
# Again note that this configuration may create a larger set of events, so consider increasing the buffer size
# on busy systems (-b)

# In all situations, one should consider file watches for senstive files
#
## APPLICATION FILE WATCHES:
##
## Should be of the form
##   -w path-to-file -p permissions -k keyname
## where the permission are any one of the following:
##    r - read of the file
##    w - write to the file
##    x - execute the file
##    a - change in the fileâ€™s attribute
## Ensure the keys do not clash with keys already in use.
##
## The following keynames should be used dependant on the file being watched
##
##      Key             File Type
##      Sens_Config     For sensitive configuration files
##      Sens_Data       For sensitive data files
##
## Examples may be
##
##    # Monitor all reads, writes and attribute changes to the keystore file
##    # "/some_path/keystore.jks"
##      -w /some_path/keystore.jks -p rwa -k Sens_Config
##    # Monitor all reads, writes and attribute changes to all files created
##    # within the '/data/special_files' directory tree (and below)
##      -a exit,always -F dir=/data/special_files/ -F perm=rwa -k Sens_Data
##    # Monitor all reads, writes and attribute changes to all files created
##    # within the '/data/special_files' directory tree (and below) but exclude
##    # the user 'ignoreme'
##      -a exit,always -F dir=/data/special_files/ -F perm=rwa -k Sens_Data -F auid!=ignoreme


#
## If you rules are going to both /var/log/audit/audit.log and /var/log/messages all the time, then consider running
#  systemctl mask systemd-journald-audit.socket
# to turn off sending to /var/log/messages
#
# In order to collect audit events from the kernel from boot time until the auditd process is ready to recieve them
# we need to apply appropriate arguments to the kernel boot command line.
# We need to ensure the arguments
#   audit=1 audit_backlog_limit=8192
# are present on the boot kernel command line
#
# Do this by editing /etc/default/grub  and adding to the variable GRUB_CMDLINE_LINUX
#   audit=1 audit_backlog_limit=8192
# Then execute
   grub2-mkconfig -o /boot/grub2/grub.cfg
